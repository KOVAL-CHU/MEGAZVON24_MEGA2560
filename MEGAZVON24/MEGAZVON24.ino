////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// MEGAZVON24  Arduino MEGA2560 программа для автоматического перезвона колоколов по заданному времени.

// https://github.com/ss2s/MEGAZVON24_MEGA2560

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#include <LiquidCrystal.h>  // библиотека дисплея с кнопками

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// НАСТРОЙКА РЕЛЕ: если реле включается нолем поменять местами 1 и 0
#define HHH 1  // HIGH
#define LLL 0  // LOW

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// РАСПИНОВКА: для настройки изменять цифры, те что в конце, перед коментарием

// РАСПИНОВКА КОЛОКОЛОВ:
// для настройки изменять последнюю цифру(номер пина Arduino к которому подключен ударный механизм(язычек))
// значение идущее за #define является именем колокола. к которому нужно обращатся в программе для создания мелодий.
#define DEF_PIN_K1 1  // 1 колокол (реле 1)
#define DEF_PIN_K2 2  // 2 колокол (реле 2)
#define DEF_PIN_K3 3  // 3 колокол (реле 3)
#define DEF_PIN_K4 34  // 4 колокол (реле 4)
#define DEF_PIN_K5 35  // 5 колокол (реле 5)
#define DEF_PIN_K6 36  // 6 колокол (реле 6)
#define DEF_PIN_K7 37  // 7 колокол (реле 7)
#define DEF_PIN_K8 38  // 8 колокол (реле 8)
#define DEF_PIN_K9 39  // 9 колокол (реле 9)
#define DEF_PIN_K10 40  // 10 колокол (реле 10)
#define DEF_PIN_K11 11  // 11 колокол (реле 11)
#define DEF_PIN_K12 12  // 12 колокол (реле 12)
#define DEF_PIN_K13 13  // 13 колокол (реле 13)
#define DEF_PIN_K14 14  // 14 колокол (реле 14)
#define DEF_PIN_K15 15  // 15 колокол (реле 15)
#define DEF_PIN_K16 16  // 16 колокол (реле 16)
#define DEF_PIN_K17 17  // 17 колокол (реле 17)
#define DEF_PIN_K18 18  // 18 колокол (реле 18)
#define DEF_PIN_K19 19  // 19 колокол (реле 19)
#define DEF_PIN_K20 20  // 20 колокол (реле 20)
#define DEF_PIN_K21 21  // 21 колокол (реле 21)
#define DEF_PIN_K22 22  // 22 колокол (реле 22)
#define DEF_PIN_K23 23  // 23 колокол (реле 23)
#define DEF_PIN_K24 24  // 24 колокол (реле 24)

// РАСПИНОВКА КОМПЛЕКТУЮЩИХ:

// ДИСПЛЕЙ
#define DEF_LCD_LIGHT_PIN 10  // подсветка дисплея
#define DEF_LCD_KEY_PIN 0  // вход кнопок, аналоговый вход A0

// ЧАСЫ

// ТЕРМОРЕГУЛЯТОР

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// НАСТРОЙКИ ВРЕМЕННЫХ ЗАДЕРЖЕК ПО УМОЛЧАНИЮ:
#define DEF_TIME_OF_BLOW_TO_THE_BELL 300      // ВРЕМЯ УДАРА ЯЗЫЧКА В КОЛОКОЛ В МИЛЛИСЕКУНДАХ (ВРЕМЯ НОТЫ)
#define DEF_DEL_UNT_NEXT_NOTA 3000      // ВРЕМЯ ДО ВЫЗОВА СЛЕДУЮЩЕЙ НОТЫ (ТАЙМАУТ МЕЖДУ НОТАМИ)

// ПРОЧИЕ НАСТРОЙКИ

#define DEF_PODOGREV_ENABLE 0  // ФУНКЦИЯ ПОДОГРЕВА БОКСА С УСТРОЙСТВОМ. ЕСЛИ 1 ПОДОГРЕВ ВКЛЮЧЕН, 0 ВЫКЛЮЧЕН.

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// инициализация дисплея с кнопками
LiquidCrystal lcd(8, 9, 4, 5, 6, 7);

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// функция проверки кнопок
byte key(){  // 1-723, 2-482, 3-133, 4-310, 5-0;
	int val = analogRead(DEF_LCD_KEY_PIN);
	if(val < 67) return 5;             // right
	else if(val < 221) return 4;       // left
	else if(val < 396) return 3;       // up
	else if(val < 602) return 2;       // down
	else if(val < 873) return 1;       // select
	else if(val <= 1023) return 0;     // no pressed
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// функция нота,принимает три параметра через запятую(имя колокола, время звучания ноты, время до вызова следующей ноты)
// по умолчанию: колокол 1, время звучания ноты 300мс, таймаут между нотами 3000мс
// пример использования функции:[nota(DEF_PIN_K7, 250, 2000);] 7 колокол, время ноты 250мс, таймаут до следующей ноты 2с

int nota(byte _kolokol = DEF_PIN_K1,
unsigned int _timeOfBlowToTheBell = DEF_TIME_OF_BLOW_TO_THE_BELL,
unsigned int _delayUntilNextNota = DEF_DEL_UNT_NEXT_NOTA){

	digitalWrite(_kolokol, HHH);
	delay(_timeOfBlowToTheBell);
	digitalWrite(_kolokol, LLL);
	delay(_delayUntilNextNota);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// функция мелодия состоит из последовательных вызовов функции нота. по сути является определенной мелодией

// мелодия EX пример мелодии
void melodiaEX(){

	nota(DEF_PIN_K11, 250, 2000);  // 1 нота, реле 11 (время включения реле 250мс, задержка до следующей ноты 2000мс)
	nota(DEF_PIN_K3, 280, 2000);   // 2 нота, реле 3 (время включения реле 280мс, задержка до следующей ноты 2000мс)
	nota(DEF_PIN_K2, 250, 3000);   // 3 нота, реле 2 (время включения реле 250мс, задержка до следующей ноты 3000мс)
	nota(DEF_PIN_K12, 300, 5000);  // 4 нота, реле 12 (время включения реле 300мс, задержка до следующей ноты 5000мс)
	nota(DEF_PIN_K1, 300, 2000);   // 5 нота, реле 1 (время включения реле 300мс, задержка до следующей ноты 2000мс)
}

// мелодия1
void melodia1(){}
// мелодия2
void melodia2(){}
// мелодия3
void melodia3(){}
// мелодия4
void melodia4(){}
// мелодия5
void melodia5(){}
// мелодия6
void melodia6(){}
// мелодия7
void melodia7(){}
// мелодия8
void melodia8(){}
// мелодия9
void melodia9(){}
// мелодия10
void melodia10(){}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void menu(){}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void setup() {

	// инициализация колоколов
	pinMode(DEF_PIN_K1, OUTPUT);
	pinMode(DEF_PIN_K2, OUTPUT);
	pinMode(DEF_PIN_K3, OUTPUT);
	pinMode(DEF_PIN_K4, OUTPUT);
	pinMode(DEF_PIN_K5, OUTPUT);
	pinMode(DEF_PIN_K6, OUTPUT);
	pinMode(DEF_PIN_K7, OUTPUT);
	pinMode(DEF_PIN_K8, OUTPUT);
	pinMode(DEF_PIN_K9, OUTPUT);
	pinMode(DEF_PIN_K10, OUTPUT);
	pinMode(DEF_PIN_K11, OUTPUT);
	pinMode(DEF_PIN_K12, OUTPUT);
	pinMode(DEF_PIN_K13, OUTPUT);
	pinMode(DEF_PIN_K14, OUTPUT);
	pinMode(DEF_PIN_K15, OUTPUT);
	pinMode(DEF_PIN_K16, OUTPUT);
	pinMode(DEF_PIN_K17, OUTPUT);
	pinMode(DEF_PIN_K18, OUTPUT);
	pinMode(DEF_PIN_K19, OUTPUT);
	pinMode(DEF_PIN_K20, OUTPUT);
	pinMode(DEF_PIN_K21, OUTPUT);
	pinMode(DEF_PIN_K22, OUTPUT);
	pinMode(DEF_PIN_K23, OUTPUT);
	pinMode(DEF_PIN_K24, OUTPUT);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void loop() {
	melodiaEX();
	delay (10000);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
